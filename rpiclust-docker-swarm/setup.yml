---
- name: Update, Configure, and Setup MicroK8s Cluster on Raspberry Pis with NFS storage
  hosts: all
  become: true

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Update snap packages
      command: snap refresh
      ignore_errors: true

    - name: Ensure cgroup_enable line is set correctly in /boot/firmware/cmdline.txt
      lineinfile:
        path: /boot/firmware/cmdline.txt
        regexp: '^(.*)cgroup_enable(.*)$'
        line: 'cgroup_enable=memory cgroup_memory=1 net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait'
        backrefs: yes

    - name: Reboot the Raspberry Pis
      reboot:

    - name: Wait for Raspberry Pis to be available
      wait_for_connection:
        delay: 10
        timeout: 300

    - name: Install NFS client utilities
      apt:
        name: nfs-common
        state: present

    - name: Create directory for NFS mount
      file:
        path: "{{ nfs_mount_path }}"
        state: directory
        mode: '0755'

    - name: Mount NFS share
      mount:
        path: "{{ nfs_mount_path }}"
        src: "{{ nfs_address }}"
        fstype: nfs
        state: mounted

    - name: Install microk8s via snap
      command: snap install microk8s --classic

    - name: Add node to microk8s on master
      command: microk8s.add-node
      register: add_node_output
      when: "'manager' in group_names"
      tags: skipme

    - name: Get the microk8s join command on master
      command: "microk8s.add-node --format short"
      register: add_node_output_raw
      when: "'manager' in group_names"
      changed_when: false
      tags: skipme

    # For each worker, generate a join token on the master
    - name: Generate join command for each worker
      command: "microk8s.add-node --format short"
      register: worker_join_commands
      delegate_to: "{{ groups['manager'][0] }}"
      run_once: true
      loop: "{{ groups['workers'] }}"
      loop_control:
        label: "{{ item }}"
      when: "'manager' in group_names"

    - name: Set join command as fact for each worker
      set_fact:
        worker_join_command: "{{ worker_join_commands['results'] | selectattr('item', 'equalto', inventory_hostname) | map(attribute='stdout') | first }}"
      when: "'workers' in group_names"

    - name: Join microk8s cluster using worker-specific command
      command: "{{ worker_join_command }}"
      when: "'workers' in group_names" and worker_join_command is defined

    - name: Create NFS Persistent Volume definition on master
      copy:
        content: |
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: nfs-pv
          spec:
            capacity:
              storage: 10Gi
            accessModes:
              - ReadWriteMany
            persistentVolumeReclaimPolicy: Retain
            storageClassName: nfs
            nfs:
              path: "{{ nfs_address.split(':')[1] }}"
              server: "{{ nfs_address.split(':')[0] }}"
        dest: "/home/{{ ansible_ssh_user }}/nfs-pv.yml"
      when: "'manager' in group_names"

    - name: Create NFS Persistent Volume Claim definition on master
      copy:
        content: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: nfs-pvc
          spec:
            accessModes:
              - ReadWriteMany
            storageClassName: nfs
            resources:
              requests:
                storage: 10Gi
        dest: "/home/{{ ansible_ssh_user }}/nfs-pvc.yml"
      when: "'manager' in group_names"

    - name: Create NFS StorageClass definition on master
      copy:
        content: |
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: nfs
          provisioner: kubernetes.io/no-provisioner
          volumeBindingMode: WaitForFirstConsumer
        dest: "/home/{{ ansible_ssh_user }}/nfs-sc.yml"
      when: "'manager' in group_names"

    - name: Apply the NFS Persistent Volume on master
      command:
        cmd: "microk8s.kubectl apply -f /home/{{ ansible_ssh_user }}/nfs-pv.yml"
      when: "'manager' in group_names"

    - name: Apply the NFS Persistent Volume Claim on master
      command:
        cmd: "microk8s.kubectl apply -f /home/{{ ansible_ssh_user }}/nfs-pvc.yml"
      when: "'manager' in group_names"

    - name: Apply the NFS StorageClass on master
      command:
        cmd: "microk8s.kubectl apply -f /home/{{ ansible_ssh_user }}/nfs-sc.yml"
      when: "'manager' in group_names"

    - name: Set NFS StorageClass as default on master
      command:
        cmd: "microk8s.kubectl patch storageclass nfs -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'"
      when: "'manager' in group_names"

    - name: Check nodes on the master
      command: microk8s.kubectl get node
      register: get_nodes_output
      when: "'manager' in group_names"

    - name: Print nodes from the master
      debug:
        msg: "{{ get_nodes_output.stdout }}"
      when: "'manager' in group_names"
